---
- hosts: localhost
  connection: local
  gather_facts: no
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory"
    key_root: "{{ playbook_dir }}/keys"
    cloud_instance: "{{ cloud_model.split('.')[0] }}"
    cloud_project: "{{ lookup('env','USER') }}"
    cloud_provider: 'aws'
    cloud_region: 'us-east-1'
    cloud_user: ec2-user
    cloud_name: "{{ cloud_instance }}.{{ cloud_project }}"
    cloud_key_name: "{{ cloud_name }}"
    cloud_private_key_file: "{{ key_root }}/{{ cloud_key_name }}.key"
    cloud_public_key_file: "{{ key_root }}/{{ cloud_key_name }}.key.pub"
    cloud_cidr: '10.1.0.0/16'

  tasks:
    - assert:
        that:
          - cloud_model is defined
        msg: "You must specify a model, e.g. -e 'cloud_model=csr-lab1.yml'"

    - set_fact:
        cloud_provider: "{{ opt_provider_region.split('/')[0] }}"
        cloud_region: "{{ opt_provider_region.split('/')[1] }}"
      when: opt_provider_region is defined

    - block:
        - name: Create the keys directory
          file:
            path: "{{ key_root }}"
            state: directory
            mode: 0755

        - openssl_privatekey:
            path: "{{ cloud_private_key_file }}"
            type: RSA
            size: 2048
          register: key_results

        - openssl_publickey:
            path: "{{ cloud_public_key_file }}"
            privatekey_path: "{{ cloud_private_key_file }}"
            format: OpenSSH
            force: no
          when: key_results.changed
          register: public_key_results

        - set_fact:
            cloud_public_key_material: "{{ lookup('file', cloud_public_key_file) }}"
      when: cloud_public_key_material is not defined

    - name: Read in the Cloud Model {{ cloud_model }}
      include_vars:
        file: "{{ model_dir }}/{{ cloud_model }}"

    - include_role:
        name: cloud-config
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      loop_control:
        loop_var: vpc_item
      run_once: yes
      tags:
        - provision

    - include_role:
        name: cloud-facts
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      loop_control:
        loop_var: vpc_item
      run_once: yes
      tags:
        - inventory

    - name: Create the inventory directory
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      with_items:
        - "{{ inventory_root }}"
        - "{{ inventory_root }}/{{ cloud_project }}"
        - "{{ inventory_root }}/{{ cloud_project }}/host_vars"
        - "{{ inventory_root }}/{{ cloud_project }}/group_vars"
      tags:
        - inventory

    - name: Create the inventory file on the local node
      template:
        src: "{{ playbook_dir }}/templates/local-inventory.j2"
        dest: "{{ inventory_root }}/{{ cloud_project }}/{{ cloud_instance }}"
      tags:
        - inventory

- name: Create vars files
  hosts: network
  gather_facts: no
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory"
    key_root: "{{ playbook_dir }}/keys"

  tasks:
    - debug: var=hostvars[inventory_hostname]

    - name: Read in the Cloud Model {{ cloud_model }}
      include_vars:
        file: "{{ model_dir }}/{{ cloud_model }}"

    - name: Create the {{ inventory_hostname }} directory
      file:
        path: "{{ inventory_root }}/{{ cloud_project }}/host_vars/{{ inventory_hostname }}.{{ cloud_instance }}"
        state: directory
        mode: 0755
      delegate_to: localhost

    - debug: var=interfaces

    - name: Create the interfaces file for {{ inventory_hostname }}
      template:
        src: local-interfaces.j2
        dest: "{{ inventory_root }}/{{ cloud_project }}/host_vars/{{ inventory_hostname }}.{{ cloud_instance }}/interfaces.yml"
      delegate_to: localhost
      when: interfaces is defined
