---
- set_fact:
    cloud_instance_map: {}
    cloud_interface_map: {}

- name: Get the instance facts for project {{ cloud_vpc_data.project }}
  ec2_instance_facts:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ cloud_vpc_data.region }}"
    filters:
      vpc-id: "{{ vpc_id }}"
      "tag:Environment": "{{ cloud_vpc_data.project }}"
  register: instance_facts

- name: Create a dict of instances for project {{ cloud_vpc_data.project }}
  set_fact:
    cloud_instance_map: "{{ cloud_instance_map | default({}) | combine({ instance_facts_item.tags.Name: instance_facts_item.instance_id }) }}"
  with_items: "{{ instance_facts.instances }}"
  loop_control:
    loop_var: instance_facts_item

# - name: Create an EC2 key in {{ cloud_vpc_data.region }}
#   ec2_key:
#     aws_access_key: "{{ aws_access_key | default(omit) }}"
#     aws_secret_key: "{{ aws_secret_key | default(omit) }}"
#     name: "{{ cloud_name }}"
#     region: "{{ cloud_vpc_data.region }}"
#   register: ec2_key
#
# - name: save private key to {{ ansible_ssh_private_key_file }}
#   copy:
#     content: "{{ ec2_key.key.private_key }}"
#     dest: "{{ ansible_ssh_private_key_file }}"
#     mode: 0600
#   when: ec2_key.changed

- name: Create private key for {{ cloud_name }}
  ec2_key:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ cloud_vpc_data.region }}"
    name: "{{ cloud_name }}"
    key_material: "{{ ssh_public_key_material }}"
    state: present

- include: "{{ role_path }}/tasks/aws-instance.yml"
  with_items: "{{ cloud_instance_data | default([]) }}"
  loop_control:
    loop_var: cloud_instance_item
