---
- name: Read in the cloud inventory
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory }}"
    group_vars_root: "{{ playbook_dir }}/files/group_vars"
    use_full_hostname: no

  tasks:
    - assert:
        that:
          - opt_model is defined
        msg: "You must specify a model"

    - name: Read in the Cloud Model {{ opt_model }}
      include_vars:
        file: "{{ model_dir }}/{{ opt_model }}.yml"

    - set_fact:
        ansible_ssh_private_key_file: "keys/{{ cloud_name }}_key"
        ansible_ssh_public_key_file: "keys/{{ cloud_name }}_key.pub"

    - include_role:
        name: cloud-facts
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      tasks_from: instances
      loop_control:
        loop_var: vpc_item
      delegate_to: localhost
      run_once: yes

- name: Create vars files
  hosts: control,network
  gather_facts: no
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory }}"
    group_vars_root: "{{ playbook_dir }}/files/group_vars"
    use_full_hostname: yes
  tasks:
    - set_fact:
        hostname: "{{ inventory_hostname if (use_full_hostname|bool) else inventory_hostname.split('.')[0] }}"

    - name: Find tower.cfg
      set_fact:
        tower_config_file: "{{ item }}"
      with_first_found:
        - files:
          - "{{ inventory_root }}/{{ cloud_project }}/tower_cli.cfg"
          - '~/.tower_cli.cfg'

    - name: Add tower inventory
      tower_inventory:
        name: "an-demo-kit"
        organization: "ismc"
        state: present
      delegate_to: localhost
      run_once: yes

    - debug: var=hostvars[inventory_hostname]

    - name: Add tower group
      tower_group:
        name: "{{ item.key }}"
        inventory: "an-demo-kit"
        state: present
      with_dict: "{{ groups }}"
      when: item.key != 'all'
      delegate_to: localhost
      run_once: yes

    - name: Check to see which group_vars file exists
      stat:
        path: "{{ group_vars_root }}/{{ item.key }}.yml"
      register: stat_results
      with_dict: "{{ groups }}"
      delegate_to: localhost
      run_once: yes

    - debug: var=stat_results

    - name: Add tower group variables
      tower_group:
        name: "{{ item.item.key }}"
        inventory: "an-demo-kit"
        state: present
        variables: "{{ lookup('file', item.invocation.module_args.path ) }}"
      when: item.stat.exists
      with_items: "{{ stat_results.results }}"
      delegate_to: localhost

    - name: Add tower host
      tower_host:
        name: "{{ hostname }}"
        inventory: "an-demo-kit"
        state: present
        variables:
          ansible_host: "{{ ansible_host }}"
          ansible_user: "{{ ansible_user }}"
          ansible_network_os: "{{ ansible_network_os | default(omit) }}"
          interfaces: "{{ interfaces | default(omit) }}"
      delegate_to: localhost

    - name: Add host to group
      command: "tower-cli host associate --host {{ hostname|quote }} --group {{ item|quote }}"
      with_items: "{{ group_names }}"
      delegate_to: localhost
