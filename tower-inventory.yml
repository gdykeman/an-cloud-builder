---
- name: Read in the cloud inventory
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory"
    key_root: "{{ playbook_dir }}/keys"
    cloud_instance: "{{ cloud_model.split('.')[0] }}"
    cloud_project: "{{ lookup('env','USER') }}"
    cloud_provider: 'aws'
    cloud_region: 'us-east-1'
    cloud_user: ec2-user
    cloud_name: "{{ cloud_instance }}.{{ cloud_project }}"
    cloud_key_name: "{{ cloud_name }}"
    cloud_private_key_file: "{{ key_root }}/{{ cloud_key_name }}.key"
    cloud_public_key_file: "{{ key_root }}/{{ cloud_key_name }}.key.pub"
    cloud_cidr: '10.1.0.0/16'

  tasks:
    - assert:
        that:
          - cloud_model is defined
        msg: "You must specify a model, e.g. -e 'cloud_model=csr-lab1.yml'"

    - set_fact:
        cloud_provider: "{{ opt_provider_region.split('/')[0] }}"
        cloud_region: "{{ opt_provider_region.split('/')[1] }}"
      when: opt_provider_region is defined

    - name: Read in the Cloud Model {{ cloud_model }}
      include_vars:
        file: "{{ model_dir }}/{{ cloud_model }}"

    - include_role:
        name: cloud-facts
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      loop_control:
        loop_var: vpc_item

    - debug: var=hostvars

    - name: Find tower.cfg
      set_fact:
        tower_config_file: "{{ item }}"
      with_first_found:
        - files:
          - "{{ inventory_root }}/{{ cloud_project }}/tower_cli.cfg"
          - '~/.tower_cli.cfg'
          - /etc/awx/tower_cli.cfg

    - name: Add tower inventory
      tower_inventory:
        name: "{{ inventory_name }}"
        organization: "ismc"
        state: present

    - name: Add tower groups
      tower_group:
        name: "{{ item.key }}"
        inventory: "{{ inventory_name }}"
        state: present
      with_dict: "{{ groups }}"
      when: item.key != 'all'

- name: Create vars files
  hosts: "{{ cloud_name }}"
  gather_facts: no
  vars:
    inventory_root: "{{ playbook_dir }}/inventory"
    model_dir: "{{ playbook_dir }}/models"
    cloud_instance: "{{ cloud_model.split('.')[0] }}"
    cloud_project: "{{ lookup('env','USER') }}"
    cloud_name: "{{ cloud_instance }}.{{ cloud_project }}"

  tasks:
    - set_fact:
        hostname: "{{ inventory_hostname if (use_full_hostname|bool) else inventory_hostname.split('.')[0] }}"

    - debug: var=hostvars[inventory_hostname]

    - name: Find tower.cfg
      set_fact:
        tower_config_file: "{{ item }}"
      with_first_found:
        - files:
          - "{{ inventory_root }}/{{ cloud_project }}/tower_cli.cfg"
          - '~/.tower_cli.cfg'
          - /etc/awx/tower_cli.cfg

    # - name: Add tower inventory
    #   tower_inventory:
    #     name: "{{ inventory_name }}"
    #     organization: "ismc"
    #     state: present
    #   delegate_to: localhost
    #   run_once: yes
    #
    # - debug: var=hostvars[inventory_hostname]
    #
    # - name: Add tower group
    #   tower_group:
    #     name: "{{ item.key }}"
    #     inventory: "{{ inventory_name }}"
    #     state: present
    #   with_dict: "{{ groups }}"
    #   when: item.key != 'all'
    #   delegate_to: localhost
    #   run_once: yes

    # - name: Check to see which group_vars file exists
    #   stat:
    #     path: "{{ group_vars_root }}/{{ item.key }}.yml"
    #   register: stat_results
    #   with_dict: "{{ groups }}"
    #   delegate_to: localhost
    #   run_once: yes
    #
    # - debug: var=stat_results
    #
    # - name: Add tower group variables
    #   tower_group:
    #     name: "{{ item.item.key }}"
    #     inventory: "{{ inventory_name }}"
    #     state: present
    #     variables: "{{ lookup('file', item.invocation.module_args.path ) }}"
    #   when: item.stat.exists
    #   with_items: "{{ stat_results.results }}"
    #   delegate_to: localhost

    - name: Add tower host
      tower_host:
        name: "{{ hostname }}"
        inventory: "{{ inventory_name }}"
        state: present
        variables:
          ansible_host: "{{ ansible_host }}"
          ansible_user: "{{ ansible_user }}"
          ansible_network_os: "{{ ansible_network_os | default(omit) }}"
          interfaces: "{{ interfaces | default(omit) }}"
      delegate_to: localhost

    - name: Add host to group
      command: "tower-cli host associate --host {{ hostname|quote }} --group {{ item|quote }}"
      with_items: "{{ group_names }}"
      delegate_to: localhost
