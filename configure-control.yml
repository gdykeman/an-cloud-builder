---
- name: Get the cloud facts
  hosts: localhost
  tasks:
    - include_role:
        name: cloud-facts
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      tasks_from: instances
      loop_control:
        loop_var: vpc_item
      delegate_to: localhost
      run_once: yes

- name: Create vars files
  hosts: control-hosts
  become: yes
  vars:
    demo_kit_root: '/var/lib/awx/projects/an-demo-kit'
    lab_username: 'labuser'
    ansible_tower_admin_pass: "{{ lookup('password', '/tmp/passwordfile chars=digits') }}"
  tasks:
    - name: Update all packages
      yum:
        name: '*'
        state: latest
      become: yes

    # - name: Install Ansible
    #   yum:
    #     name: "https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.4.2.0-1.el7.ans.noarch.rpm"
    #   become: yes

    - include_role:
        name: ansible-tower
      vars:
        ansible_tower_version: 3.2.2
      become: yes

    - name: Allow password authentication
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication yes"
                  state=present
      become: yes
      notify: Restart sshd

    - user:
        name: "{{ lab_username }}"
        comment: "Lab User"
        password: '$6$2qJit.8h6RYzzGpF$DCyv0YRGCN0FTqO0e.MjphP1xooyzOB1sloxzSaA/Db8Br.r.Fip.sEc9bV1vfMqzhzBL0RAQPskpzwXh10mU0'
        uid: 2000
        group: wheel

    # - name: Install EPEL repository
    #   yum:
    #     name: epel-release
    #     state: present
    #   become: yes
    #

    - name: Remove out of date Yum packages
      yum:
        name: httpd
        state: absent
      with_items:
        - python-requests
        - pyOpenSSL

    - name: Install YUM packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python2-pip

    - name: Install PIP packages
      pip:
        name: "{{ item }}"
        state: latest
      with_items:
        - "setuptools>=1.4"
        - f5-sdk
        - bigsuds
        - pan-python
        - pandevice
        - pexpect
        - requests
        - pyopenssl
        - netaddr
        - ansible-tower-cli
    #     #- ansible
    #     - paramiko
    #     - PyYAML
    #     - Jinja2
    #     - httplib2
    #     - six
    #     #- shade
    #     - jxmlease
    #     - ncclient
    #     - boto
    #     - boto3
    #     - awscli
    #     - ansible-tower-cli

    #     #- junos-eznc
    #   become: yes

    - name: Add IP addresses to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ hostvars[item].inventory_hostname.split('.')[0] }}"
        state: present
      with_items: "{{ groups.all }}"
      become: yes

    - name: Make the projects directory rx
      file:
        path: /var/lib/awx/projects
        state: directory
        mode: 0755

    - name: Install the an-demo-kit
      git:
        repo: https://github.com/ismc/an-demo-kit.git
        dest: "{{ demo_kit_root }}"
        force: yes

    - name: Create the inventory directory
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ lab_username }}"
        mode: 0755
        recurse: yes
      with_items:
        - "{{ demo_kit_root }}"
        - "{{ demo_kit_root }}/inventory"
        - "{{ demo_kit_root }}/inventory/host_vars"
        - "{{ demo_kit_root }}/inventory/group_vars"

    - name: Create the inventory file on the control node(s)
      template:
        src: "{{ playbook_dir }}/templates/control-inventory.j2"
        dest: "{{ demo_kit_root }}/inventory/hosts"
        owner: "{{ lab_username }}"

    - name: Create the group_vars files
      copy:
        dest: "{{ demo_kit_root }}/inventory/group_vars/{{ item.key }}.yml"
        content: "{{ item.value | to_nice_yaml }}"
        owner: "{{ lab_username }}"
      with_dict: "{{ group_vars }}"
      when: group_vars is defined

    - name: Create the host_vars directories
      file:
        path: "{{ demo_kit_root }}/inventory/host_vars/{{ item.split('.')[0] }}"
        state: directory
        owner: "{{ lab_username }}"
        mode: 0755
      when: hostvars[item].interfaces is defined
      with_items: "{{ groups.network }}"

    - name: Create the interfaces files
      template:
        src: "{{ playbook_dir }}/templates/interfaces.j2"
        dest: "{{ demo_kit_root }}/inventory/host_vars/{{ item.split('.')[0] }}/interfaces.yml"
        owner: "{{ lab_username }}"
      when: hostvars[item].interfaces is defined
      with_items: "{{ groups.network }}"

    - name: Create the .ssh directory
      file:
        path: "~{{ lab_username }}/.ssh"
        state: directory
        owner: "{{ lab_username }}"
        mode: 0700
        recurse: yes

    - name: Copy the ssh key
      copy:
        src: "{{ ansible_ssh_private_key_file }}"
        dest: "~{{ lab_username }}/.ssh/id_rsa"
        owner: "{{ lab_username }}"
        mode: 0600

    - name: create the ~/.ansible.cfg
      blockinfile:
        path: "~{{ lab_username }}/.ansible.cfg"
        create: yes
        owner: "{{ lab_username }}"
        block: |
          [defaults]
          host_key_checking = False


    - name: create the ~/.tower.cfg
      blockinfile:
        path: "~{{ lab_username }}/.ansible.cfg"
        create: yes
        owner: "{{ lab_username }}"
        block: |
          host: "{{ inventory_hostname }}"
          username: admin
          password: "{{ ansible_tower_admin_pass }}"

    - debug: msg="Control node public IP':' {{ ansible_host }}"


  handlers:
    - name: Restart sshd
      systemd:
        name: sshd
        state: restarted
      become: yes
