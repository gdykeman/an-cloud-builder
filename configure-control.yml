---
- name: Read in the cloud inventory
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory"
    key_root: "{{ playbook_dir }}/keys"
    cloud_instance: "{{ cloud_model.split('.')[0] }}"
    cloud_project: "{{ lookup('env','USER') }}"
    cloud_provider: 'aws'
    cloud_region: 'us-east-1'
    cloud_user: ec2-user
    cloud_name: "{{ cloud_instance }}.{{ cloud_project }}"
    cloud_key_name: "{{ cloud_name }}"
    cloud_private_key_file: "{{ key_root }}/{{ cloud_key_name }}.key"
    cloud_public_key_file: "{{ key_root }}/{{ cloud_key_name }}.key.pub"
    cloud_cidr: '10.1.0.0/16'

  tasks:
    - assert:
        that:
          - cloud_model is defined
        msg: "You must specify a model, e.g. -e 'cloud_model=csr-lab1.yml'"

    - set_fact:
        cloud_provider: "{{ opt_provider_region.split('/')[0] }}"
        cloud_region: "{{ opt_provider_region.split('/')[1] }}"
      when: opt_provider_region is defined

    - name: Read in the Cloud Model {{ cloud_model }}
      include_vars:
        file: "{{ model_dir }}/{{ cloud_model }}"

    - include_role:
        name: cloud-facts
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      tasks_from: instances
      loop_control:
        loop_var: vpc_item
      delegate_to: localhost
      run_once: yes

- hosts: "control_hosts:&{{ cloud_name }}"
  become: yes
  vars:
    model_dir: "{{ playbook_dir }}/models"
    inventory_root: "{{ playbook_dir }}/inventory"
    key_root: "{{ playbook_dir }}/keys"
    cloud_instance: "{{ cloud_model.split('.')[0] }}"
    cloud_project: "{{ lookup('env','USER') }}"
    cloud_provider: 'aws'
    cloud_region: 'us-east-1'
    cloud_user: ec2-user
    cloud_name: "{{ cloud_instance }}.{{ cloud_project }}"
    cloud_key_name: "{{ cloud_name }}"
    cloud_private_key_file: "{{ key_root }}/{{ cloud_key_name }}.key"
    cloud_public_key_file: "{{ key_root }}/{{ cloud_key_name }}.key.pub"
    cloud_cidr: '10.1.0.0/16'
    demo_kit_root: '~labuser/an-demo-kit'
    ansible_tower_admin_pass: "{{ lookup('password', '/tmp/passwordfile chars=digits') }}"
    lab_username: 'labuser'
    use_ansible_devel: no

  tasks:
    # - name: Update all packages
    #   yum:
    #     name: '*'
    #     state: latest

    - name: Create the lab user
      user:
        name: "{{ lab_username }}"
        comment: "Lab User"
        password: '$6$2qJit.8h6RYzzGpF$DCyv0YRGCN0FTqO0e.MjphP1xooyzOB1sloxzSaA/Db8Br.r.Fip.sEc9bV1vfMqzhzBL0RAQPskpzwXh10mU0'
        uid: 2000
        group: wheel

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create the .ssh directory
      file:
        path: "~{{ lab_username }}/.ssh"
        state: directory
        owner: "{{ lab_username }}"
        mode: 0700

    - name: Copy the ssh private key
      copy:
        src: "{{ ansible_ssh_private_key_file }}"
        dest: "~{{ lab_username }}/.ssh/id_rsa"
        owner: "{{ lab_username }}"
        mode: 0600

    - name: Copy the ssh public key
      copy:
        src: "{{ ansible_ssh_private_key_file }}.pub"
        dest: "~{{ lab_username }}/.ssh/id_rsa.pub"
        owner: "{{ lab_username }}"
        mode: 0600

    - name: create the ~/.ssh/config
      blockinfile:
        path: "~{{ lab_username }}/.ssh/config"
        create: yes
        owner: "{{ lab_username }}"
        block: |
          Host *
          StrictHostKeyChecking no

    - name: create the ~/.ansible.cfg
      blockinfile:
        path: "~{{ lab_username }}/.ansible.cfg"
        create: yes
        owner: "{{ lab_username }}"
        block: |
          [defaults]
          host_key_checking = False

    - name: Allow password authentication
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication yes"
                  state=present
      become: yes
      notify: Restart sshd

    - name: Disable certificate checking for Python
      lineinfile:
        dest: "~{{ lab_username }}/.bash_profile"
        line: "export PYTHONHTTPSVERIFY=0"

    - name: Check to see if the .tower_cli.cfg exists
      stat:
        path: "~{{ lab_username }}/.tower_cli.cfg"
      register: stat_results
      become_user: "{{ lab_username }}"

    - name: create the ~/.tower_cli.cfg
      blockinfile:
        path: "~{{ lab_username }}/.tower_cli.cfg"
        create: yes
        owner: "{{ lab_username }}"
        block: |
          host: localhost
          username: admin
          password: {{ ansible_tower_admin_pass }}
      when: stat_results.stat.exists == false
      become_user: "{{ lab_username }}"

    # - name: Get the password that we've previously specified for Tower
    #   slurp:
    #     src: "~{{ lab_username }}/.tower_cli.cfg"
    #   register: tower_creds
    #   become_user: "{{ lab_username }}"
    #
    # - debug: msg="{{ tower_creds['content'] | b64decode }}"
    #
    # - set_fact:
    #     tower_creds: "{{ tower_creds['content'] | b64decode | to_yaml }}"
    #
    # - debug: var=tower_creds
    #
    # - meta: end_play

    - name: Add EPEL repository
      yum_repository:
        name: epel
        description: EPEL YUM repo
        baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
        gpgkey: https://mirror.steadfast.net/epel/RPM-GPG-KEY-EPEL-7

    - name: Remove out of date Yum packages
      yum:
        name: "{{ item }}"
        state: absent
      with_items:
        - python-requests
        - pyOpenSSL

    - name: Install YUM packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python2-pip
        - git

    - name: Install YUM packages
      yum:
        name: ansible
        state: latest
      when: use_ansible_devel|bool == false

    - include_role:
        name: ansible-tower
      vars:
        ansible_tower_version: '3.2.2'
      tags:
        - tower

    - name: Install Ansible Devel
      pip:
        name: git+git://github.com/ansible/ansible.git
        state: latest
      when: use_ansible_devel|bool

    - name: Install PIP packages
      pip:
        name: "{{ item }}"
        state: latest
      with_items:
        - "setuptools>=1.4"
        - f5-sdk
        - bigsuds
        - pan-python
        - pandevice
        - pexpect
        - requests
        - pyopenssl
        - netaddr
        - ansible-tower-cli
        - xmltodict
        - ncclient

    - name: Add IP addresses to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ hostvars[item].inventory_hostname.split('.')[0] }}"
        state: present
      with_items: "{{ groups.all }}"

    - name: Create the git user
      user:
        name: git
        comment: git
        password: '$6$2qJit.8h6RYzzGpF$DCyv0YRGCN0FTqO0e.MjphP1xooyzOB1sloxzSaA/Db8Br.r.Fip.sEc9bV1vfMqzhzBL0RAQPskpzwXh10mU0'
        uid: 2001
        group: wheel

    - name: Create the .ssh directory
      file:
        path: "~git/.ssh"
        state: directory
        owner: git
        mode: 0700

    - name: Create git user's authorized_keys
      copy:
        src: "{{ ansible_ssh_private_key_file }}.pub"
        dest: "~git/.ssh/authorized_keys"
        owner: git
        mode: 0600

    - name: Create the an-demo-kit local repo
      command: git clone --bare https://github.com/network-automation/an-demo-kit.git
      args:
        creates: /home/git/an-demo-kit.git/HEAD
      become_user: git

    - name: Install the an-demo-kit
      git:
        repo: git@localhost:/home/git/an-demo-kit.git
        dest: "{{ demo_kit_root }}"
        force: yes
      become_user: "{{ lab_username }}"

    - name: Remove inventory from .gitignore
      lineinfile:
        path: "~{{ lab_username }}/an-demo-kit/.gitignore"
        state: absent
        regexp: 'inventory'
      become_user: "{{ lab_username }}"

    - name: Create the inventory directory
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ lab_username }}"
        mode: 0755
        recurse: yes
      with_items:
        - "{{ demo_kit_root }}/inventory"
        - "{{ demo_kit_root }}/inventory/host_vars"
        - "{{ demo_kit_root }}/inventory/group_vars"

    - name: Create the inventory file on the control node(s)
      template:
        src: control-inventory.j2
        dest: "{{ demo_kit_root }}/inventory/hosts"
        owner: "{{ lab_username }}"

    - name: Create the group_vars files
      copy:
        src: group_vars
        dest: "{{ demo_kit_root }}/inventory"
        owner: "{{ lab_username }}"

    - name: Create the host_vars directories
      file:
        path: "{{ demo_kit_root }}/inventory/host_vars/{{ item.split('.')[0] }}"
        state: directory
        owner: "{{ lab_username }}"
        mode: 0755
      when: hostvars[item].interfaces is defined
      with_items: "{{ groups.network }}"

    - name: Create the interfaces files
      template:
        src: "{{ playbook_dir }}/templates/interfaces.j2"
        dest: "{{ demo_kit_root }}/inventory/host_vars/{{ item.split('.')[0] }}/interfaces.yml"
        owner: "{{ lab_username }}"
      when: hostvars[item].interfaces is defined
      with_items: "{{ groups.network }}"

    - name: Add the inventory changes
      command: git add inventory
      args:
        chdir: "{{ demo_kit_root }}"
      become_user: "{{ lab_username }}"

    - name: Commit the inventory changes
      command: git commit -a -m "Added inventory"
      args:
        chdir: "{{ demo_kit_root }}"
      become_user: "{{ lab_username }}"

    - name: Add tower git credential
      tower_credential:
        name: git
        description: git
        organization: Default
        kind: scm
        state: present
        ssh_key_data: "~/.ssh/id_rsa"
        tower_config_file: "~/.tower_cli.cfg"
      become_user: "{{ lab_username }}"
      tags:
        - tower

    - name: Add tower machine credential
      tower_credential:
        name: tower
        description: tower
        organization: Default
        kind: ssh
        state: present
        ssh_key_data: "~/.ssh/id_rsa"
        tower_config_file: "~/.tower_cli.cfg"
      become_user: "{{ lab_username }}"
      tags:
        - tower

    - debug: msg="Control node public IP':' {{ ansible_host }}"

  handlers:
    - name: Restart sshd
      systemd:
        name: sshd
        state: restarted
      become: yes
