---
- name: Get the cloud facts
  hosts: localhost
  tasks:
    - include_role:
        name: cloud-facts
      vars:
        - cloud_vpc_name: "{{ vpc_item.name }}"
        - cloud_vpc_data: "{{ vpc_item }}"
      with_items: "{{ vpc_list | default([]) }}"
      tasks_from: instances
      loop_control:
        loop_var: vpc_item
      delegate_to: localhost
      run_once: yes

- name: Create vars files
  hosts: control
  become: yes
  vars:
    demo_kit_root: '/var/lib/aws/projects/an-demo-kit'
  tasks:
    # - name: Update all packages
    #   yum:
    #     name: '*'
    #     state: latest
    #   become: yes

    # - name: Install Ansible
    #   yum:
    #     name: "https://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/ansible-2.4.2.0-1.el7.ans.noarch.rpm"
    #   become: yes

    - include_role:
        name: ansible-tower
      vars:
        ansible_tower_version: 3.2.2
      become: yes

    - name: Allow password authentication
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication yes"
                  state=present
      become: yes
      notify: Restart sshd

    - name: Set the user password
      user:
        name: centos
        password: '$6$2qJit.8h6RYzzGpF$DCyv0YRGCN0FTqO0e.MjphP1xooyzOB1sloxzSaA/Db8Br.r.Fip.sEc9bV1vfMqzhzBL0RAQPskpzwXh10mU0'
      become: yes

    - name: Install EPEL repository
      yum:
        name: epel-release
        state: present
      become: yes

    - name: Install YUM packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - python-pip
        - python-devel
        - python-netaddr
        - openssl-devel
        - sudo
        - git
        - gcc

      become: yes

    # - name: Install Ansible
    #   pip:
    #     name: 'git+git://github.com/ansible/ansible.git'
    #   become: yes

    - name: Install PIP packages
      pip:
        name: "{{ item }}"
        state: latest
      with_items:
        #- ansible
        - paramiko
        - PyYAML
        - Jinja2
        - httplib2
        - six
        #- shade
        - jxmlease
        - ncclient
        - pexpect
        - f5-sdk
        - bigsuds
        - pan-python
        - pandevice
        - requests
        - pyopenssl
        #- junos-eznc
      become: yes

    - name: Add IP addresses to /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ hostvars[item].inventory_hostname.split('.')[0] }}"
        state: present
      with_items: "{{ groups.all }}"
      become: yes


    - name: Install the an-demo-kit
      git:
        repo: https://github.com/ismc/an-demo-kit.git
        dest: "{{ demo_kit_root }}"
        force: yes

    - name: Create the inventory directory
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_ssh_user }}"
        mode: 0755
      with_items:
        - "{{ demo_kit_root }}/inventory"
        - "{{ demo_kit_root }}/inventory/host_vars"
        - "{{ demo_kit_root }}/inventory/group_vars"

    - name: Create the inventory file on the control node(s)
      template:
        src: "{{ playbook_dir }}/templates/control-inventory.j2"
        dest: "{{ demo_kit_root }}/inventory/hosts"

    - name: Create the group_vars files
      copy:
        dest: "{{ demo_kit_root }}/inventory/group_vars/{{ item.key }}.yml"
        content: "{{ item.value | to_nice_yaml }}"
      with_dict: "{{ group_vars }}"
      when: group_vars is defined

    - name: Create the host_vars directories
      file:
        path: "{{ demo_kit_root }}/inventory/host_vars/{{ item.split('.')[0] }}"
        state: directory
        owner: "{{ ansible_ssh_user }}"
        mode: 0755
      when: hostvars[item].interfaces is defined
      with_items: "{{ groups.network }}"

    - name: Create the interfaces files
      template:
        src: "{{ playbook_dir }}/templates/interfaces.j2"
        dest: "{{ demo_kit_root }}/inventory/host_vars/{{ item.split('.')[0] }}/interfaces.yml"
      when: hostvars[item].interfaces is defined
      with_items: "{{ groups.network }}"

    - name: Copy the ssh key
      copy:
        src: "{{ ansible_ssh_private_key_file }}"
        dest: "~{{ ansible_ssh_user }}/.ssh/id_rsa"
        owner: "{{ ansible_ssh_user }}"
        mode: 0600

    - name: create the .ansible.cfg
      blockinfile:
        path: "~{{ ansible_ssh_user }}/.ansible.cfg"
        create: yes
        block: |
          [defaults]
          host_key_checking = False

    - debug: msg="Control node public IP':' {{ ansible_host }}"

  handlers:
    - name: Restart sshd
      systemd:
        name: sshd
        state: restarted
      become: yes
